import { app, BrowserWindow, Menu, MenuItem, ipcMain, shell } from 'electron'
import path from 'path'
import { clipboard } from 'electron'
import dayjs from 'dayjs'
import Store from 'electron-store'

var openUrl = ''

const storeIndex = new Store({ name: 'storeIndex' })
const storeEntries = new Store({ name: 'storeEntries' })
const storeUserPreferences = new Store({ name: 'storeUserPreferences' })
const dayKey = 'Days'

if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('journal', process.execPath, [path.resolve(process.argv[1])])
  }
} else {
  app.setAsDefaultProtocolClient('journal')
}

console.log(storeIndex.path)
console.log(storeEntries.path)

// IPC listeners

// storeIndex

ipcMain.on('electron-storeIndex-get-all', async (event) => {
  let value: any = storeIndex.get(dayKey) ?? []
  let today = dayjs().format('YYYYMMDD')
  let todayExists = value.some((el: any) => {
    return el == today
  })
  if (!todayExists) {
    value.push(today)
    console.log(`Added ${today} to cached Days`)
  }
  event.returnValue = value
})

ipcMain.on('electron-storeIndex-set-all', async (event, val) => {
  storeIndex.set(dayKey, val)
})

ipcMain.on('electron-storeIndex-add', async (event, val) => {
  let days = (storeIndex.get(dayKey) as String[]) ?? []
  days.push(val)
  let daysUnique = [...new Set([...days])].sort()
  storeIndex.set(dayKey, daysUnique)
  event.returnValue = daysUnique
})

// storeEntries

ipcMain.on('electron-storeEntries-get', async (event, val) => {
  event.returnValue = storeEntries.get(val)
})

ipcMain.on('electron-storeEntries-get-all', async (event, val) => {
  event.returnValue = storeEntries.store
})

ipcMain.on('electron-storeEntries-set', async (event, key, val) => {
  storeEntries.set(key, val)
})

// storeUserPreferences

ipcMain.on('electron-storeUserPreferences-get-all', async (event, val) => {
  console.log('getAll')
  event.returnValue = storeUserPreferences.store
})

ipcMain.on('electron-storeUserPreferences-get', async (event, val) => {
  event.returnValue = storeUserPreferences.get(val)
})

ipcMain.on('electron-storeUserPreferences-set', async (event, key, val) => {
  storeUserPreferences.set(key, val)
})

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Env
// process.env.NODE_ENV = 'development'

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    titleBarStyle: 'customButtonsOnHover',
    trafficLightPosition: { x: 16, y: 16 },
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      spellcheck: false,
    },
  })

  mainWindow.once('ready-to-show', () => {
    mainWindow.show()

    // Handle open from url when app was closed
    if (openUrl) {
      mainWindow.webContents.send('open-url', openUrl)
    }
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()

  mainWindow.webContents.on('context-menu', (event: any, params: any) => {
    console.log('context-menu event')

    mainWindow.webContents.send('electron-handleSpellCheck', params)
    // const menu = new Menu()

    // // Add each spelling suggestion
    // for (const suggestion of params.dictionarySuggestions) {
    //   menu.append(
    //     new MenuItem({
    //       label: suggestion,
    //       click: () => mainWindow.webContents.replaceMisspelling(suggestion),
    //     })
    //   )
    // }

    // // Allow users to add the misspelled word to the dictionary
    // if (params.misspelledWord) {
    //   menu.append(
    //     new MenuItem({
    //       label: 'Add to dictionary',
    //       click: () =>
    //         mainWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord),
    //     })
    //   )
    // }

    // menu.popup()
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// Handle the protocol
app.on('open-url', (event, url) => {
  const win = BrowserWindow.getAllWindows()[0]
  if (win) {
    // Handle open from url when app is opened
    win.webContents.send('open-url', url)
  } else {
    // If app is closed/no windows, save url for when app opens
    openUrl = url
  }
})

app.commandLine.appendSwitch('ignore-certificate-errors')

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
